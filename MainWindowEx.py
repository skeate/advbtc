"""Subclass of MainWindow, which is generated by wxFormBuilder."""

import wx
import BaseGui
import pyperclip


class MainWindowEx(BaseGui.MainWindow):
    """ Implementing MainWindow """
    def __init__(self, parent, queue):
        BaseGui.MainWindow.__init__(self, parent)
        self.work_queue = queue

        # set up timer to check connection
        # and update balance
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.timer_update, self.timer)
        self.timer.Start(0)

    def timer_update(self, event):
        """Update the balance periodically"""
        self.work_queue.put(('beat', self.timer_update_cb))
        self.timer.Start(1000)
        event.Skip()

    def timer_update_cb(self, data):
        """Callback for update timer"""
        if data is False:
            self.status_bar.SetStatusText('Connection error.')
            self.overview_cbalance.SetLabel('connection error')
            self.overview_ucbalance.SetLabel('connection error')
        else:
            self.status_bar.SetStatusText(
                'Connected to server (%d connections to network)'
                % data['connections'])
            self.overview_cbalance.SetLabel('%.8f' % data['balance'])
            self.overview_ucbalance.SetLabel(
                '%.8f' % (data['ubalance'] - data['balance']))

    # Menu
    def menu_backup(self, event):
        # TODO: Implement menu_backup
        pass

    def menu_exit(self, event):
        # TODO: Implement menu_exit
        pass

    def menu_encrypt(self, event):
        # TODO: Implement menu_encrypt
        pass

    def menu_change_passphrase(self, event):
        # TODO: Implement menu_changePassphrase
        pass

    def menu_options(self, event):
        # TODO: Implement menu_settings
        pass

    def menu_about(self, event):
        # TODO: Implement menu_about
        pass

    # Personal Addresses tab
    def paddrs_refresh(self, event):
        self.work_queue.put(('get addresses', self.paddrs_refresh_cb))
        self.paddrs_refresh_btn.SetLabel('loading...')
        self.paddrs_refresh_btn.Enable(False)

    def paddrs_refresh_cb(self, data):
        """List refresh callback"""
        zero_count = 0
        self.paddrs_list.DeleteAllItems()
        dict_form = dict(zip(range(len(data)), data))
        self.paddrs_list.setData(dict_form)
        index = 0
        for key, data in dict_form.items():
            if not self.paddrs_showall.IsChecked() and data[1] == 0:
                if not self.paddrs_showlabeled.IsChecked() or data[2] == '':
                    continue
            zero_count += 1
            # some addresses do not have labels,
            # so set label field to empty string
            if len(data) == 2:
                data.append("")
            self.paddrs_list.InsertStringItem(index, data[0])
            self.paddrs_list.SetStringItem(index, 1, '%.8f' % data[1])
            self.paddrs_list.SetStringItem(index, 2, data[2])
            self.paddrs_list.SetItemData(index, key)
        self.paddrs_list.SortListItems(1, 0)
        self.paddrs_count.SetLabel('%d / %d' % (zero_count, len(dict_form)))
        self.paddrs_refresh_btn.SetLabel('Refresh Address List')
        self.paddrs_refresh_btn.Enable(True)

    def paddrs_create(self, event):
        self.work_queue.put(('create address', self.paddrs_create_cb))

    def paddrs_create_cb(self, data):
        print data

    def paddrs_newtx(self, event):
        # TODO: Implement paddrs_newtx
        pass

    def paddrs_copy(self, event):
        row = self.paddrs_list.GetFirstSelected()
        address = self.paddrs_list.GetItem(row, 0).GetText()
        pyperclip.copy(address)

    def paddrs_enable_btns(self, event):
        self.paddrs_newtx_btn.Enable(True)
        self.paddrs_copy_btn.Enable(True)

    def paddrs_disable_btns(self, event):
        self.paddrs_newtx_btn.Enable(False)
        self.paddrs_copy_btn.Enable(False)

    # Create Tx tab - Simple
    def ctx_simple_send(self, event):
        self.work_queue.put((
            'send to address',
            self.ctx_simple_send_cb,
            self.ctx_simple_recipient.Value,
            float(self.ctx_simple_amount.Value)
            ))
        self.ctx_simple_clear(None)

    def ctx_simple_send_cb(self, data):
        print data

    def ctx_simple_clear(self, event):
        # TODO: Implement ctx_simple_clear
        pass
